1. match (m:town), (n:peak) where m.name = "Darjeeling" and n.name = "Sandakphu"
match least = ALLSHORTESTPATHS((m)-[*]->(n)) return least
2. match (m:town), (n:peak) where m.name = "Darjeeling" and n.name = "Sandakphu"
match least = ALLSHORTESTPATHS((m)-[*]->(n)) with least where all(r in relationships(least) where r.winter = "true")
return least
3.
    a) match paths = (m:town)-[*]->(n:peak) where m.name = "Darjeeling" and n.name = "Sandakphu"
    unwind relationships(paths) as rel with paths, collect(rel.distance) as dists
    with paths, reduce (temp = 0, dist in dists | temp + dist) as distance
    return paths, distance order by distance asc

    b) match path = (m:town)-[r:twowheeler*]->(n:peak) where m.name = "Darjeeling" and all(rel in relationships(path)
    where  rel.summer = "true") return n

4. match (m:Airport)<-[:ORIGIN]-(n:Flight) with m, count(n) as connections return m, connections order by connections
5. MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport)
    WHERE REDUCE(
        acc = 0, n IN [x IN NODES(p)
        WHERE 'Flight' IN LABELS(x)] |
        acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
    ) < 3000
    RETURN p
6.
    MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
    WITH p, REDUCE(
        acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
        acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
    ) as price
    RETURN p, price
    ORDER BY price desc
7.
    MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
    WITH p, REDUCE(
        acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
        acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
    ) as price
    RETURN p, price
    ORDER BY price asc
    LIMIT 1
8.
    MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
    WITH p, REDUCE(
        acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
        acc + [(n)<-[:ASSIGN]-(ticket {class: 'business'}) | ticket.price][0]
    ) as price
    RETURN p, price
    ORDER BY price asc
    LIMIT 1
9. match (m:Airport)<-[:ORIGIN]-(n:Flight)-[:DESTINATION]-(b:Airport) return m,n,b
10.
    MATCH p = (a1:Airport)<-[r1:ORIGIN]-(f1:Flight)-[r2:DESTINATION]->(a2:Airport)<-[r3:ORIGIN]-(f2:Flight)-[r4:DESTINATION]->(a3:Airport)
    WHERE not(a1=a2) AND not(a1=a3) AND not(a2=a3)
    WITH p, REDUCE(
        acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
        acc + [(n)<-[:ASSIGN]-(ticket {class: 'economy'}) | ticket.price][0]
    ) as price
    RETURN p, price
    ORDER BY price asc
    LIMIT 1
